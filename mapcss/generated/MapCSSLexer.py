# Generated from MapCSS.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,408,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        14,3,14,163,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,34,1,34,1,34,1,34,3,34,218,8,34,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,3,39,236,8,
        39,1,40,1,40,3,40,240,8,40,1,41,1,41,3,41,244,8,41,1,41,1,41,1,41,
        5,41,249,8,41,10,41,12,41,252,9,41,1,42,1,42,1,43,1,43,1,44,1,44,
        1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,
        1,50,1,50,1,50,1,50,5,50,277,8,50,10,50,12,50,280,9,50,1,50,1,50,
        1,51,1,51,1,51,1,51,1,51,5,51,289,8,51,10,51,12,51,292,9,51,1,51,
        1,51,1,52,4,52,297,8,52,11,52,12,52,298,1,53,1,53,1,53,1,54,4,54,
        305,8,54,11,54,12,54,306,1,54,5,54,310,8,54,10,54,12,54,313,9,54,
        1,54,1,54,4,54,317,8,54,11,54,12,54,318,3,54,321,8,54,1,55,1,55,
        1,55,1,56,1,56,1,56,1,56,1,56,4,56,331,8,56,11,56,12,56,332,1,56,
        4,56,336,8,56,11,56,12,56,337,1,56,1,56,4,56,342,8,56,11,56,12,56,
        343,3,56,346,8,56,3,56,348,8,56,3,56,350,8,56,1,57,1,57,1,57,1,58,
        1,58,1,58,3,58,358,8,58,1,59,1,59,1,59,3,59,363,8,59,1,60,1,60,1,
        60,5,60,368,8,60,10,60,12,60,371,9,60,1,60,1,60,1,61,1,61,1,61,1,
        61,1,62,1,62,1,62,1,62,5,62,383,8,62,10,62,12,62,386,9,62,1,62,3,
        62,389,8,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,399,8,63,
        10,63,12,63,402,9,63,1,63,1,63,1,63,1,63,1,63,2,384,400,0,64,1,0,
        3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,
        51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,
        73,0,75,0,77,0,79,0,81,0,83,35,85,36,87,37,89,38,91,39,93,40,95,
        41,97,0,99,0,101,42,103,43,105,44,107,45,109,46,111,47,113,48,115,
        0,117,0,119,0,121,49,123,50,125,51,127,52,1,0,20,2,0,83,83,115,115,
        2,0,69,69,101,101,2,0,84,84,116,116,2,0,9,9,32,32,2,0,73,73,105,
        105,2,0,77,77,109,109,2,0,80,80,112,112,2,0,79,79,111,111,2,0,82,
        82,114,114,2,0,65,90,97,122,1,0,0,159,3,0,65,90,95,95,97,122,4,0,
        45,45,65,90,95,95,97,122,2,0,45,45,95,95,4,0,32,33,35,91,93,126,
        176,176,4,0,32,38,40,91,93,126,176,176,1,0,48,57,4,0,32,41,43,46,
        48,126,176,176,3,0,32,46,48,126,176,176,3,0,9,10,12,13,32,32,430,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
        0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,121,1,0,0,0,0,123,
        1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,1,129,1,0,0,0,3,132,1,0,0,0,
        5,134,1,0,0,0,7,136,1,0,0,0,9,138,1,0,0,0,11,141,1,0,0,0,13,143,
        1,0,0,0,15,145,1,0,0,0,17,147,1,0,0,0,19,149,1,0,0,0,21,151,1,0,
        0,0,23,153,1,0,0,0,25,155,1,0,0,0,27,157,1,0,0,0,29,162,1,0,0,0,
        31,164,1,0,0,0,33,167,1,0,0,0,35,170,1,0,0,0,37,173,1,0,0,0,39,175,
        1,0,0,0,41,177,1,0,0,0,43,180,1,0,0,0,45,183,1,0,0,0,47,186,1,0,
        0,0,49,189,1,0,0,0,51,192,1,0,0,0,53,195,1,0,0,0,55,198,1,0,0,0,
        57,201,1,0,0,0,59,203,1,0,0,0,61,205,1,0,0,0,63,207,1,0,0,0,65,209,
        1,0,0,0,67,211,1,0,0,0,69,213,1,0,0,0,71,219,1,0,0,0,73,227,1,0,
        0,0,75,229,1,0,0,0,77,231,1,0,0,0,79,235,1,0,0,0,81,239,1,0,0,0,
        83,243,1,0,0,0,85,253,1,0,0,0,87,255,1,0,0,0,89,257,1,0,0,0,91,259,
        1,0,0,0,93,261,1,0,0,0,95,263,1,0,0,0,97,265,1,0,0,0,99,268,1,0,
        0,0,101,271,1,0,0,0,103,283,1,0,0,0,105,296,1,0,0,0,107,300,1,0,
        0,0,109,320,1,0,0,0,111,322,1,0,0,0,113,325,1,0,0,0,115,351,1,0,
        0,0,117,357,1,0,0,0,119,362,1,0,0,0,121,364,1,0,0,0,123,374,1,0,
        0,0,125,378,1,0,0,0,127,394,1,0,0,0,129,130,5,92,0,0,130,131,5,92,
        0,0,131,2,1,0,0,0,132,133,2,128,65533,0,133,4,1,0,0,0,134,135,5,
        44,0,0,135,6,1,0,0,0,136,137,5,63,0,0,137,8,1,0,0,0,138,139,5,63,
        0,0,139,140,5,33,0,0,140,10,1,0,0,0,141,142,5,8712,0,0,142,12,1,
        0,0,0,143,144,5,10697,0,0,144,14,1,0,0,0,145,146,5,8838,0,0,146,
        16,1,0,0,0,147,148,5,8839,0,0,148,18,1,0,0,0,149,150,5,8840,0,0,
        150,20,1,0,0,0,151,152,5,8841,0,0,152,22,1,0,0,0,153,154,5,40,0,
        0,154,24,1,0,0,0,155,156,5,41,0,0,156,26,1,0,0,0,157,158,5,46,0,
        0,158,28,1,0,0,0,159,163,5,61,0,0,160,161,5,61,0,0,161,163,5,61,
        0,0,162,159,1,0,0,0,162,160,1,0,0,0,163,30,1,0,0,0,164,165,5,33,
        0,0,165,166,5,61,0,0,166,32,1,0,0,0,167,168,5,60,0,0,168,169,5,61,
        0,0,169,34,1,0,0,0,170,171,5,62,0,0,171,172,5,61,0,0,172,36,1,0,
        0,0,173,174,5,60,0,0,174,38,1,0,0,0,175,176,5,62,0,0,176,40,1,0,
        0,0,177,178,5,61,0,0,178,179,5,126,0,0,179,42,1,0,0,0,180,181,5,
        33,0,0,181,182,5,126,0,0,182,44,1,0,0,0,183,184,5,94,0,0,184,185,
        5,61,0,0,185,46,1,0,0,0,186,187,5,36,0,0,187,188,5,61,0,0,188,48,
        1,0,0,0,189,190,5,42,0,0,190,191,5,61,0,0,191,50,1,0,0,0,192,193,
        5,126,0,0,193,194,5,61,0,0,194,52,1,0,0,0,195,196,5,124,0,0,196,
        197,5,124,0,0,197,54,1,0,0,0,198,199,5,38,0,0,199,200,5,38,0,0,200,
        56,1,0,0,0,201,202,5,42,0,0,202,58,1,0,0,0,203,204,5,47,0,0,204,
        60,1,0,0,0,205,206,5,37,0,0,206,62,1,0,0,0,207,208,5,43,0,0,208,
        64,1,0,0,0,209,210,5,45,0,0,210,66,1,0,0,0,211,212,5,33,0,0,212,
        68,1,0,0,0,213,214,7,0,0,0,214,215,7,1,0,0,215,217,7,2,0,0,216,218,
        7,3,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,70,1,0,0,0,219,220,5,
        64,0,0,220,221,7,4,0,0,221,222,7,5,0,0,222,223,7,6,0,0,223,224,7,
        7,0,0,224,225,7,8,0,0,225,226,7,2,0,0,226,72,1,0,0,0,227,228,2,48,
        57,0,228,74,1,0,0,0,229,230,7,9,0,0,230,76,1,0,0,0,231,232,8,10,
        0,0,232,78,1,0,0,0,233,236,7,11,0,0,234,236,3,77,38,0,235,233,1,
        0,0,0,235,234,1,0,0,0,236,80,1,0,0,0,237,240,7,12,0,0,238,240,3,
        77,38,0,239,237,1,0,0,0,239,238,1,0,0,0,240,82,1,0,0,0,241,244,3,
        75,37,0,242,244,5,95,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,250,
        1,0,0,0,245,249,3,75,37,0,246,249,3,73,36,0,247,249,7,13,0,0,248,
        245,1,0,0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
        248,1,0,0,0,250,251,1,0,0,0,251,84,1,0,0,0,252,250,1,0,0,0,253,254,
        5,91,0,0,254,86,1,0,0,0,255,256,5,93,0,0,256,88,1,0,0,0,257,258,
        5,123,0,0,258,90,1,0,0,0,259,260,5,125,0,0,260,92,1,0,0,0,261,262,
        5,58,0,0,262,94,1,0,0,0,263,264,5,59,0,0,264,96,1,0,0,0,265,266,
        5,92,0,0,266,267,5,34,0,0,267,98,1,0,0,0,268,269,5,92,0,0,269,270,
        5,39,0,0,270,100,1,0,0,0,271,278,5,34,0,0,272,277,7,14,0,0,273,277,
        3,3,1,0,274,277,3,97,48,0,275,277,3,1,0,0,276,272,1,0,0,0,276,273,
        1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,
        1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,282,
        5,34,0,0,282,102,1,0,0,0,283,290,5,39,0,0,284,289,7,15,0,0,285,289,
        3,3,1,0,286,289,3,99,49,0,287,289,3,1,0,0,288,284,1,0,0,0,288,285,
        1,0,0,0,288,286,1,0,0,0,288,287,1,0,0,0,289,292,1,0,0,0,290,288,
        1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,
        5,39,0,0,294,104,1,0,0,0,295,297,7,16,0,0,296,295,1,0,0,0,297,298,
        1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,106,1,0,0,0,300,301,
        5,45,0,0,301,302,3,105,52,0,302,108,1,0,0,0,303,305,7,16,0,0,304,
        303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,
        321,1,0,0,0,308,310,7,16,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,
        309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,
        316,5,46,0,0,315,317,7,16,0,0,316,315,1,0,0,0,317,318,1,0,0,0,318,
        316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,304,1,0,0,0,320,
        311,1,0,0,0,321,110,1,0,0,0,322,323,5,45,0,0,323,324,3,109,54,0,
        324,112,1,0,0,0,325,326,5,124,0,0,326,327,5,122,0,0,327,349,1,0,
        0,0,328,330,5,45,0,0,329,331,3,73,36,0,330,329,1,0,0,0,331,332,1,
        0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,350,1,0,0,0,334,336,3,
        73,36,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,
        1,0,0,0,338,347,1,0,0,0,339,345,5,45,0,0,340,342,3,73,36,0,341,340,
        1,0,0,0,342,343,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,
        1,0,0,0,345,341,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,339,
        1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,328,1,0,0,0,349,335,
        1,0,0,0,350,114,1,0,0,0,351,352,5,92,0,0,352,353,5,47,0,0,353,116,
        1,0,0,0,354,358,3,115,57,0,355,358,7,17,0,0,356,358,3,3,1,0,357,
        354,1,0,0,0,357,355,1,0,0,0,357,356,1,0,0,0,358,118,1,0,0,0,359,
        363,3,115,57,0,360,363,7,18,0,0,361,363,3,3,1,0,362,359,1,0,0,0,
        362,360,1,0,0,0,362,361,1,0,0,0,363,120,1,0,0,0,364,365,5,47,0,0,
        365,369,3,117,58,0,366,368,3,119,59,0,367,366,1,0,0,0,368,371,1,
        0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,
        0,0,0,372,373,5,47,0,0,373,122,1,0,0,0,374,375,7,19,0,0,375,376,
        1,0,0,0,376,377,6,61,0,0,377,124,1,0,0,0,378,379,5,47,0,0,379,380,
        5,47,0,0,380,384,1,0,0,0,381,383,9,0,0,0,382,381,1,0,0,0,383,386,
        1,0,0,0,384,385,1,0,0,0,384,382,1,0,0,0,385,388,1,0,0,0,386,384,
        1,0,0,0,387,389,5,13,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,
        1,0,0,0,390,391,5,10,0,0,391,392,1,0,0,0,392,393,6,62,0,0,393,126,
        1,0,0,0,394,395,5,47,0,0,395,396,5,42,0,0,396,400,1,0,0,0,397,399,
        9,0,0,0,398,397,1,0,0,0,399,402,1,0,0,0,400,401,1,0,0,0,400,398,
        1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,404,5,42,0,0,404,405,
        5,47,0,0,405,406,1,0,0,0,406,407,6,63,0,0,407,128,1,0,0,0,29,0,162,
        217,235,239,243,248,250,276,278,288,290,298,306,311,318,320,332,
        337,343,345,347,349,357,362,369,384,388,400,1,0,1,0
    ]

class MapCSSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMA = 1
    QUESTION_MARK = 2
    QUESTION_MARK_NEGATED = 3
    OP_INCLUDED_IN = 4
    OP_INTERSECTS = 5
    OP_SUBSET = 6
    OP_SUPERSET = 7
    OP_NOSUBSET = 8
    OP_NOSUPERSET = 9
    PAR_OPEN = 10
    PAR_CLOSE = 11
    DOT = 12
    OP_EQ = 13
    OP_NEQ = 14
    OP_LE = 15
    OP_GE = 16
    OP_LT = 17
    OP_GT = 18
    OP_MATCH = 19
    OP_NOT_MATCH = 20
    OP_STARTS_WITH = 21
    OP_ENDS_WITH = 22
    OP_SUBSTRING = 23
    OP_CONTAINS = 24
    OP_OR = 25
    OP_AND = 26
    OP_MUL = 27
    OP_DIV = 28
    OP_MOD = 29
    OP_PLUS = 30
    OP_MINUS = 31
    OP_NOT = 32
    SET = 33
    IMPORT = 34
    NCOMPONENT = 35
    LBRACKET = 36
    RBRACKET = 37
    LBRACE = 38
    RBRACE = 39
    COLON = 40
    SEMICOLON = 41
    DQUOTED_STRING = 42
    SQUOTED_STRING = 43
    POSITIVE_INT = 44
    NEGATIVE_INT = 45
    POSITIVE_FLOAT = 46
    NEGATIVE_FLOAT = 47
    RANGE = 48
    REGEXP = 49
    WS = 50
    SL_COMMENT = 51
    ML_COMMENT = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'?'", "'?!'", "'\\u2208'", "'\\u29C9'", "'\\u2286'", 
            "'\\u2287'", "'\\u2288'", "'\\u2289'", "'('", "')'", "'.'", 
            "'!='", "'<='", "'>='", "'<'", "'>'", "'=~'", "'!~'", "'^='", 
            "'$='", "'*='", "'~='", "'||'", "'&&'", "'*'", "'/'", "'%'", 
            "'+'", "'-'", "'!'", "'['", "']'", "'{'", "'}'", "':'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "QUESTION_MARK", "QUESTION_MARK_NEGATED", "OP_INCLUDED_IN", 
            "OP_INTERSECTS", "OP_SUBSET", "OP_SUPERSET", "OP_NOSUBSET", 
            "OP_NOSUPERSET", "PAR_OPEN", "PAR_CLOSE", "DOT", "OP_EQ", "OP_NEQ", 
            "OP_LE", "OP_GE", "OP_LT", "OP_GT", "OP_MATCH", "OP_NOT_MATCH", 
            "OP_STARTS_WITH", "OP_ENDS_WITH", "OP_SUBSTRING", "OP_CONTAINS", 
            "OP_OR", "OP_AND", "OP_MUL", "OP_DIV", "OP_MOD", "OP_PLUS", 
            "OP_MINUS", "OP_NOT", "SET", "IMPORT", "NCOMPONENT", "LBRACKET", 
            "RBRACKET", "LBRACE", "RBRACE", "COLON", "SEMICOLON", "DQUOTED_STRING", 
            "SQUOTED_STRING", "POSITIVE_INT", "NEGATIVE_INT", "POSITIVE_FLOAT", 
            "NEGATIVE_FLOAT", "RANGE", "REGEXP", "WS", "SL_COMMENT", "ML_COMMENT" ]

    ruleNames = [ "EBACKSLASH", "UNICODE", "COMMA", "QUESTION_MARK", "QUESTION_MARK_NEGATED", 
                  "OP_INCLUDED_IN", "OP_INTERSECTS", "OP_SUBSET", "OP_SUPERSET", 
                  "OP_NOSUBSET", "OP_NOSUPERSET", "PAR_OPEN", "PAR_CLOSE", 
                  "DOT", "OP_EQ", "OP_NEQ", "OP_LE", "OP_GE", "OP_LT", "OP_GT", 
                  "OP_MATCH", "OP_NOT_MATCH", "OP_STARTS_WITH", "OP_ENDS_WITH", 
                  "OP_SUBSTRING", "OP_CONTAINS", "OP_OR", "OP_AND", "OP_MUL", 
                  "OP_DIV", "OP_MOD", "OP_PLUS", "OP_MINUS", "OP_NOT", "SET", 
                  "IMPORT", "DIGIT", "CHAR", "NONASCII", "NMSTART", "NMCHAR", 
                  "NCOMPONENT", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", 
                  "COLON", "SEMICOLON", "EDQUOTE", "ESQUOTE", "DQUOTED_STRING", 
                  "SQUOTED_STRING", "POSITIVE_INT", "NEGATIVE_INT", "POSITIVE_FLOAT", 
                  "NEGATIVE_FLOAT", "RANGE", "REGEX_ESCAPE", "REGEX_START", 
                  "REGEX_CHAR", "REGEXP", "WS", "SL_COMMENT", "ML_COMMENT" ]

    grammarFileName = "MapCSS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


